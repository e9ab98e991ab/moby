import com.github.blindpirate.gogradle.Go

buildscript {
    dependencies {
        //classpath 'org.apache.commons:commons-lang3:3.5'
        //classpath 'commons-io:commons-io:2.5'
        classpath files(new File(project.rootDir, '../gogradle/build/libs/gogradle-0.4.9-all.jar'))
    }
}

apply plugin: 'com.github.blindpirate.gogradle'

//plugins {
//    id 'com.github.blindpirate.gogradle' version '0.4.9'
//}

golang {
    packagePath = 'github.com/moby/moby'
}

def $if(Object predicate, Object thenPart) {
    $if(predicate, thenPart, '')
}

def $if(Object predicate, Object thenPart, Object elsePart) {
    //http://www.gnu.org/software/make/manual/make.html#Conditional-Functions
    (predicate as boolean) ? thenPart : elsePart
}

// abbr for variable
def v(String name) {
    try {
        return project.ext[name]
    } catch (Exception e) {
        return System.getenv(name) ? System.getenv(name) : ''
    }
}
//def envExists(String variable) {
//    getenv(variable) as boolean
//}
//project.ext.envs = [:]

project.ext.makeExport = [:]
project.ext.CURDIR = project.rootDir.absolutePath

def export(String key, String value) {
    project.ext.makeExport[key] = value
}

/************ NOW moby/moby/Makefile starts **************/

//# set the graph driver as the current graphdriver if not set
//DOCKER_GRAPHDRIVER := $(if $(DOCKER_GRAPHDRIVER),$(DOCKER_GRAPHDRIVER),$(shell docker info 2>&1 | grep "Storage Driver" | sed 's/.*: //'))
//export DOCKER_GRAPHDRIVER
//DOCKER_INCREMENTAL_BINARY := $(if $(DOCKER_INCREMENTAL_BINARY),$(DOCKER_INCREMENTAL_BINARY),1)
//export DOCKER_INCREMENTAL_BINARY

project.ext.DOCKER_GRAPHDRIVER = $if(v('DOCKER_GRAPHDRIVER'), v('DOCKER_GRAPHDRIVER'), ('docker info'.execute().text =~ /Storage Driver:\s+([\w\d]+)/)[0][1])
export('DOCKER_GRAPHDRIVER', v('DOCKER_GRAPH_DRIVER'))
project.ext.DOCKER_INCREMENTAL_BINARY = $if(v('DOCKER_INCREMENTAL_BINARY'), v('DOCKER_INCREMENTAL_BINARY'), '1')
export('DOCKER_INCREMENTAL_BINARY', v('DOCKER_INCREMENTAL_BINARY'))

// get OS/Arch of docker engine
//DOCKER_OSARCH := $(shell bash -c 'source hack/make/.detect-daemon-osarch && echo $${DOCKER_ENGINE_OSARCH:-$$DOCKER_CLIENT_OSARCH}')
//DOCKERFILE := $(shell bash -c 'source hack/make/.detect-daemon-osarch && echo $${DOCKERFILE}')
project.ext.DOCKER_OSARCH = ["bash", "-c", 'source hack/make/.detect-daemon-osarch && echo \${DOCKER_ENGINE_OSARCH:-\$DOCKER_CLIENT_OSARCH}'].execute().text.trim()
project.ext.DOCKERFILE = ["bash", "-c", 'source hack/make/.detect-daemon-osarch && echo \${DOCKERFILE}'].execute().text.trim()

//DOCKER_GITCOMMIT := $(shell git rev-parse --short HEAD || echo unsupported)
//export DOCKER_GITCOMMIT
try {
    project.ext.DOCKER_GIT_COMMIT = 'git rev-parse --short HEAD'.execute().text.trim()
}
catch (IOException e) {
    project.ext.DOCKER_GIT_COMMIT = 'unsupported'
}
export('DOCKER_GITCOMMIT', v('DOCKER_GIT_COMMIT'))

//# env vars passed through directly to Docker's build scripts
//# to allow things like `make KEEPBUNDLE=1 binary` easily
//# `project/PACKAGERS.md` have some limited documentation of some of these
//DOCKER_ENVS := \
//    $(if $(DOCKER_CROSSPLATFORMS), -e DOCKER_CROSSPLATFORMS) \
//    -e BUILD_APT_MIRROR \
//    -e BUILDFLAGS \
//    -e KEEPBUNDLE \
//    -e DOCKER_BUILD_ARGS \
//    -e DOCKER_BUILD_GOGC \
//    -e DOCKER_BUILD_PKGS \
//    -e DOCKER_DEBUG \
//    -e DOCKER_EXPERIMENTAL \
//    -e DOCKER_GITCOMMIT \
//    -e DOCKER_GRAPHDRIVER \
//    -e DOCKER_INCREMENTAL_BINARY \
//    -e DOCKER_PORT \
//    -e DOCKER_REMAP_ROOT \
//    -e DOCKER_STORAGE_OPTS \
//    -e DOCKER_USERLANDPROXY \
//    -e TESTDIRS \
//    -e TESTFLAGS \
//    -e TIMEOUT \
//    -e HTTP_PROXY \
//    -e HTTPS_PROXY \
//    -e NO_PROXY \
//    -e http_proxy \
//    -e https_proxy \
//    -e no_proxy
//# note: we _cannot_ add "-e DOCKER_BUILDTAGS" here because even if it's unset in the shell, that would shadow the "ENV DOCKER_BUILDTAGS" set in our Dockerfile, which is very important for our official builds
project.ext.DOCKER_ENVS = "${$if(v('DOCKER_CROSSPLATFORMS'), '-e DOCKER_CROSSPLATFORMS')} \
    -e BUILD_APT_MIRROR \
    -e BUILDFLAGS \
    -e KEEPBUNDLE \
    -e DOCKER_BUILD_ARGS \
    -e DOCKER_BUILD_GOGC \
    -e DOCKER_BUILD_PKGS \
    -e DOCKER_DEBUG \
    -e DOCKER_EXPERIMENTAL \
    -e DOCKER_GITCOMMIT \
    -e DOCKER_GRAPHDRIVER \
    -e DOCKER_INCREMENTAL_BINARY \
    -e DOCKER_PORT \
    -e DOCKER_REMAP_ROOT \
    -e DOCKER_STORAGE_OPTS \
    -e DOCKER_USERLANDPROXY \
    -e TESTDIRS \
    -e TESTFLAGS \
    -e TIMEOUT \
    -e HTTP_PROXY \
    -e HTTPS_PROXY \
    -e NO_PROXY \
    -e http_proxy \
    -e https_proxy \
    -e no_proxy"

//# to allow `make BIND_DIR=. shell` or `make BIND_DIR= test`
//# (default to no bind mount if DOCKER_HOST is set)
//# note: BINDDIR is supported for backwards-compatibility here
//BIND_DIR := $(if $(BINDDIR),$(BINDDIR),$(if $(DOCKER_HOST),,bundles))
//DOCKER_MOUNT := $(if $(BIND_DIR),-v "$(CURDIR)/$(BIND_DIR):/go/src/github.com/docker/docker/$(BIND_DIR)")
if (v('BINDDIR')) {
    project.ext.BIND_DIR = v('BINDDIR')
} else if (v('DOCKER_HOST')) {
    project.ext.BIND_DIR = ''
} else {
    project.ext.BIND_DIR = 'bundles'
}
project.ext.DOCKER_MOUNT = $if(v('BIND_DIR'), "-v '${v(/CURDIR/)}/${v(/BIND_DIR/)}:/go/src/github.com/docker/docker/${v(/BIND_DIR/)}'")

//# This allows the test suite to be able to run without worrying about the underlying fs used by the container running the daemon (e.g. aufs-on-aufs), so long as the host running the container is running a supported fs.
//# The volume will be cleaned up when the container is removed due to `--rm`.
//# Note that `BIND_DIR` will already be set to `bundles` if `DOCKER_HOST` is not set (see above BIND_DIR line), in such case this will do nothing since `DOCKER_MOUNT` will already be set.
//        DOCKER_MOUNT := $(if $(DOCKER_MOUNT),$(DOCKER_MOUNT),-v /go/src/github.com/docker/docker/bundles) -v $(CURDIR)/.git:/go/src/github.com/docker/docker/.git
//
//# This allows to set the docker-dev container name
//DOCKER_CONTAINER_NAME := $(if $(CONTAINER_NAME),--name $(CONTAINER_NAME),)
if (v('DOCKER_MOUNT')) {
    project.ext.DOCKER_MOUNT = "-v /go/src/github.com/docker/docker/bundles "
}
project.ext.DOCKER_MOUNT += "-v ${v('CURDIR')}/.git:/go/src/github.com/docker/docker/.git"

project.ext.DOCKER_CONTAINER_NAME = $if(v('CONTAINER_NAME'), "--name ${v('CONTAINER_NAME')}")

//# enable package cache if DOCKER_INCREMENTAL_BINARY and DOCKER_MOUNT (i.e.DOCKER_HOST) are set
//PKGCACHE_MAP := gopath:/go/pkg goroot-linux_amd64:/usr/local/go/pkg/linux_amd64 goroot-linux_amd64_netgo:/usr/local/go/pkg/linux_amd64_netgo
//PKGCACHE_VOLROOT := dockerdev-go-pkg-cache
//PKGCACHE_VOL := $(if $(PKGCACHE_DIR),$(CURDIR)/$(PKGCACHE_DIR)/,$(PKGCACHE_VOLROOT)-)
//DOCKER_MOUNT_PKGCACHE := $(if $(DOCKER_INCREMENTAL_BINARY),$(shell echo $(PKGCACHE_MAP) | sed -E 's@([^ ]*)@-v "$(PKGCACHE_VOL)\1"@g'),)
//DOCKER_MOUNT := $(DOCKER_MOUNT) $(DOCKER_MOUNT_PKGCACHE)
project.ext.PKGCACHE_MAP = [
        gopath                    : '/go/pkg',
        'goroot-linux_amd64'      : '/usr/local/go/pkg/linux_amd64',
        'goroot-linux_amd64_netgo': '/usr/local/go/pkg/linux_amd64_netgo'
]
project.ext.PKGCACHE_VOLROOT = 'dockerdev-go-pkg-cache'
project.ext.PKGCACHE_VOL = $if(v('PKGCACHE_DIR'), "${v('CURDIR')}/${v('PKGCACHE_DIR')}/", "${v('PKGCACHE_VOLROOT')}-")
if (v('DOCKER_INCREMENTAL_BINARY')) {
    // -v "$(PKGCACHE_VOL)gopath:/go/pkg" -v "$(PKGCACHE_VOL)goroot-linux_amd64:/usr/local/go/pkg/linux_amd64" -v "$(PKGCACHE_VOL)goroot-linux_amd64_netgo:/usr/local/go/pkg/linux_amd64_netgo"
    project.ext.DOCKER_MOUNT_PKGCACHE = project.ext.PKGCACHE_MAP.collect { key, value ->
        "-v \"${v('PACKAGE_VOL')}${key}:${value}\" "
    }.join(' ')
} else {
    project.ext.DOCKER_MOUNT_PKGCACHE = ''
}
project.ext.DOCKER_MOUNT = "${v('DOCKER_MOUNT')} ${v('DOCKER_MOUNT_PKGCACHE')}"

//GIT_BRANCH := $(shell git rev-parse --abbrev-ref HEAD 2>/dev/null)
//GIT_BRANCH_CLEAN := $(shell echo $(GIT_BRANCH) | sed -e "s/[^[:alnum:]]/-/g")
//DOCKER_IMAGE := docker-dev$(if $(GIT_BRANCH_CLEAN),:$(GIT_BRANCH_CLEAN))
//DOCKER_PORT_FORWARD := $(if $(DOCKER_PORT),-p "$(DOCKER_PORT)",)
project.ext.GIT_BRANCH = 'git rev-parse --abbrev-ref HEAD'.execute().text.trim()
project.ext.GIT_BRANCH_CLEAN = v('GIT_BRANCH').replaceAll(/[^a-zA-Z0-9]/, '-')
project.ext.DOCKER_IMAGE = $if(v('GIT_BRANCH_CLEAN'), "docker-dev:${v('GIT_BRANCH_CLEAN')}", "docker-dev")
project.ext.DOCKER_PORT_FORWARD = $if(v('DOCKER_PORT'), "-p ${v('DOCKER_PORT')}")

//DOCKER_FLAGS := docker run --rm -i --privileged $(DOCKER_CONTAINER_NAME) $(DOCKER_ENVS) $(DOCKER_MOUNT) $(DOCKER_PORT_FORWARD)
//BUILD_APT_MIRROR := $(if $(DOCKER_BUILD_APT_MIRROR),--build-arg APT_MIRROR=$(DOCKER_BUILD_APT_MIRROR))
//export BUILD_APT_MIRROR
project.ext.DOCKER_FLAGS = "docker run --rm -i --privileged ${v('DOCKER_CONTAINER_NAME')} ${v('DOCKER_ENVS')} ${v('DOCKER_MOUNT')} ${v('DOCKER_PORT_FORWARD')} \
-e 'GOPATH=/go:/go/src/github.com/docker/docker/.gogradle/build_gopath:/go/src/github.com/docker/docker/.gogradle/test_gopath' \
-v ${rootDir.absolutePath}/.gogradle:/go/src/github.com/docker/docker/.gogradle"
project.ext.BUILD_APT_MIRROR = $if(v('DOCKER_BUILD_APT_MIRROR'), "--build-arg APT_MIRROR=${v('DOCKER_BUILD_APT_MIRROR')}")
export('BUILD_APT_MIRROR', v('BUILD_APT_MIRROR'))

// SWAGGER_DOCS_PORT ?= 9000
if (!v('SWAGGER_DOCS_PORT')) {
    project.ext.SWAGGER_DOCS_PORT = '9000'
}

//INTEGRATION_CLI_MASTER_IMAGE := $(if $(INTEGRATION_CLI_MASTER_IMAGE), $(INTEGRATION_CLI_MASTER_IMAGE), integration-cli-master)
//INTEGRATION_CLI_WORKER_IMAGE := $(if $(INTEGRATION_CLI_WORKER_IMAGE), $(INTEGRATION_CLI_WORKER_IMAGE), integration-cli-worker)
project.ext.INTEGRATION_CLI_MASTER_IMAGE = $if(v('INTEGRATION_CLI_MASTER_IMAGE'), v('INTEGRATION_CLI_MASTER_IMAGE'), 'integration-cli-master')
project.ext.INTEGRATION_CLI_WORKER_IMAGE = $if(v('INTEGRATION_CLI_WORKER_IMAGE'), v('INTEGRATION_CLI_WORKER_IMAGE'), 'integration-cli-worker')

//# if this session isn't interactive, then we don't want to allocate a
//# TTY, which would fail, but if it is interactive, we do want to attach
//# so that the user can send e.g. ^C through.
//        INTERACTIVE := $(shell [ -t 0 ] && echo 1 || echo 0)
//ifeq ($(INTERACTIVE), 1)
//DOCKER_FLAGS += -t
//endif
if ('1' == v('INTERACTIVE')) {
    project.ext.DOCKER_FLAGS = v('DOCKER_FLAGS') + ' -t'
}

//DOCKER_RUN_DOCKER := $(DOCKER_FLAGS) "$(DOCKER_IMAGE)"
project.ext.DOCKER_RUN_DOCKER = "${v('DOCKER_FLAGS')} \"${v('DOCKER_IMAGE')}\""


class ForkFromMake extends Go {
    ForkFromMake() {
        dependsOn('installBuildDependencies')
    }

    @Override
    Task doLast(final Closure closure) {
        environment(project.ext.makeExport)
        super.doLast(closure)
    }
}

def defineMakeDotShInvocationTask(String taskName, String cmds) {
    task(taskName, type: ForkFromMake) {
        dependsOn 'build'
        doLast {
            run "${v('DOCKER_RUN_DOCKER')} hack/make.sh ${cmds}"
        }
    }
}

// default: binary
defaultTasks 'binary'

//all: build ## validate all checks, build linux binaries, run all tests\ncross build non-linux binaries and generate archives
//$(DOCKER_RUN_DOCKER) bash -c 'hack/validate/default && hack/make.sh'
task all(type: ForkFromMake) {
    dependsOn 'build'
    doLast {
        run "${v('DOCKER_RUN_DOCKER')} bash -c 'hack/validate/default && hack/make.sh'"
    }
}

//binary: build ## build the linux binaries
//$(DOCKER_RUN_DOCKER) hack/make.sh binary
defineMakeDotShInvocationTask('binary', 'binary')

//build: bundles init-go-pkg-cache
//docker build ${BUILD_APT_MIRROR} ${DOCKER_BUILD_ARGS} -t "$(DOCKER_IMAGE)" -f "$(DOCKERFILE)" .
task build(type: ForkFromMake) {
    dependsOn 'bundles', 'init-go-pkg-cache'
    doLast {
        run "docker build ${v('BUILD_APT_MIRROR')} ${v('DOCKER_BUILD_ARGS')} -t '${v('DOCKER_IMAGE')}' -f '${v('DOCKERFILE')}' ."
    }
}

//bundles:
//mkdir bundles
task bundles {
    doLast {
        mkdir 'bundles'
    }
}

//clean: clean-pkg-cache-vol ## clean up cached resources
//
//clean-pkg-cache-vol:
//@- $(foreach mapping,$(PKGCACHE_MAP), \
//    	$(shell docker volume rm $(PKGCACHE_VOLROOT)-$(shell echo $(mapping) | awk -F':/' '{ print $$1 }') > /dev/null 2>&1) \
//    )
task clean {
    dependsOn 'clean-pkg-cache-vol'
}
task 'clean-pkg-cache-vol'(type: ForkFromMake) {
    doLast {
        v('PKGCACHE_MAP').each { key, value ->
            run "docker volume rm ${v('PKGCACHE_VOLROOT')}-${key}"
        }
    }
}

//cross: build ## cross build the binaries for darwin, freebsd and\nwindows
//$(DOCKER_RUN_DOCKER) hack/make.sh dynbinary binary cross
defineMakeDotShInvocationTask('cross', 'dynbinary binary cross')

//deb: build  ## build the deb packages
//$(DOCKER_RUN_DOCKER) hack/make.sh dynbinary build-deb
defineMakeDotShInvocationTask('deb', 'dynbinary build-deb')

//init-go-pkg-cache:
//$(if $(PKGCACHE_DIR), mkdir -p $(shell echo $(PKGCACHE_MAP) | sed -E 's@([^: ]*):[^ ]*@$(PKGCACHE_DIR)/\1@g'))
task 'init-go-pkg-cache' {
    doLast {
        if (v('PKGCACHE_DIR')) {
            v('PKGCACHE_MAP').each { key, value ->
                mkdir "${v('PKGCACHE_DIR')}/${key}"
            }
        }
    }
}

//install: ## install the linux binaries
//KEEPBUNDLE=1 hack/make.sh install-binary
task install(type: ForkFromMake) {
    environment('KEEPBUNDLE', '1')

    doLast {
        run 'hack/make.sh install-binary'
    }
}

//manpages: ## Generate man pages from go source and markdown
//docker build ${DOCKER_BUILD_ARGS} -t docker-manpage-dev -f "man/$(DOCKERFILE)" ./man
//    docker run --rm \
//    	-v $(PWD):/go/src/github.com/docker/docker/ \
//    	docker-manpage-dev
task manpages(type: ForkFromMake) {
    doLast {
        run "docker build ${v('DOCKER_BUILD_ARGS')} -t docker-manpage-dev -f 'man/${v('DOCKERFILE')}' ./man"
        run """docker run --rm
                -v ${v('PWD')}:/go/src/github.com/docker/docker/
                docker-manpage-dev"""
    }
}

//rpm: build ## build the rpm packages
//$(DOCKER_RUN_DOCKER) hack/make.sh dynbinary build-rpm
defineMakeDotShInvocationTask('rpm', 'dynbinary build-rpm')

//run: build ## run the docker daemon in a container
//$(DOCKER_RUN_DOCKER) sh -c "KEEPBUNDLE=1 hack/make.sh install-binary run"
task run(type: ForkFromMake) {
    dependsOn 'build'
    doLast {
        run "${v('DOCKER_RUN_DOCKER')} sh -c 'KEEPBUNDLE=1 hack/make.sh install-binary run'"
    }
}

//shell: build ## start a shell inside the build env
//$(DOCKER_RUN_DOCKER) bash
task shell(type: ForkFromMake) {
    dependsOn 'build'
    doLast {
        run "${v('DOCKER_RUN_DOCKER')} bash"
    }
}

//yaml-docs-gen: build ## generate documentation YAML files consumed by docs repo
//$(DOCKER_RUN_DOCKER) sh -c 'hack/make.sh yaml-docs-generator && ( root=$$(pwd); cd bundles/latest/yaml-docs-generator; mkdir docs; ./yaml-docs-generator --root $${root} --target $$(pwd)/docs )'
task 'yaml-docs-gen'(type: ForkFromMake) {
    dependsOn 'build'
    doLast {
        run "${v('DOCKER_RUN_DOCKER')} sh -c 'hack/make.sh yaml-docs-generator && ( root=\$(pwd); cd bundles/latest/yaml-docs-generator; mkdir docs; ./yaml-docs-generator --root \${root} --target \$(pwd)/docs )'"
    }
}
//test: build ## run the unit, integration and docker-py tests
//$(DOCKER_RUN_DOCKER) hack/make.sh dynbinary cross test-unit test-integration-cli test-docker-py
defineMakeDotShInvocationTask('test', 'dynbinary cross test-unit test-integration-cli test-docker-py')

//test-docker-py: build ## run the docker-py tests
//$(DOCKER_RUN_DOCKER) hack/make.sh dynbinary test-docker-py
defineMakeDotShInvocationTask('test-docker-py', 'dynbinary test-docker-py')

//test-integration-cli: build ## run the integration tests
//$(DOCKER_RUN_DOCKER) hack/make.sh build-integration-test-binary dynbinary test-integration-cli
defineMakeDotShInvocationTask('test-integration-cli', 'build-integration-test-binary dynbinary test-integration-cli')
//test-unit: build ## run the unit tests
//$(DOCKER_RUN_DOCKER) hack/make.sh test-unit
defineMakeDotShInvocationTask('test-unit', 'test-unit')
//tgz: build ## build the archives (.zip on windows and .tgz\notherwise) containing the binaries
//$(DOCKER_RUN_DOCKER) hack/make.sh dynbinary binary cross tgz
defineMakeDotShInvocationTask('tgz', 'dynbinary binary cross tgz')
//validate: build ## validate DCO, Seccomp profile generation, gofmt,\n./pkg/ isolation, golint, tests, tomls, go vet and vendor
//$(DOCKER_RUN_DOCKER) hack/validate/all
task validate(type: ForkFromMake) {
    dependsOn 'build'
    doLast {
        run "${v('DOCKER_RUN_DOCKER')} hack/validate/all"
    }
}
//win: build ## cross build the binary for windows
//$(DOCKER_RUN_DOCKER) hack/make.sh win
defineMakeDotShInvocationTask('win', 'win')

dependencies {
    golang {
        build name:'github.com/Azure/go-ansiterm', version:'388960b655244e76e24c75f48631564eaefade62', transitive:false
        build name:'github.com/Microsoft/hcsshim', tag:'v0.5.13', transitive:false
        build name:'github.com/Microsoft/go-winio', tag:'v0.3.9', transitive:false
        build name:'github.com/Sirupsen/logrus', tag:'v0.11.0', transitive:false
        build name:'github.com/davecgh/go-spew', version:'346938d642f2ec3594ed81d874461961cd0faa76', transitive:false
        build name:'github.com/docker/libtrust', version:'9cbd2a1374f46905c68a4eb3694a130610adc62a', transitive:false
        build name:'github.com/go-check/check', version:'4ed411733c5785b40214c70bce814c3a3a689609', transitive:false, url:'https://github.com/cpuguy83/check.git'
        build name:'github.com/gorilla/context', tag:'v1.1', transitive:false
        build name:'github.com/gorilla/mux', tag:'v1.1', transitive:false
        build name:'github.com/kr/pty', version:'5cf931ef8f', transitive:false
        build name:'github.com/mattn/go-shellwords', tag:'v1.0.3', transitive:false
        build name:'github.com/tchap/go-patricia', tag:'v2.2.6', transitive:false
        build name:'github.com/vdemeester/shakers', version:'24d7f1d6a71aa5d9cbe7390e4afb66b7eef9e1b3', transitive:false
        build name:'golang.org/x/net', version:'c427ad74c6d7a814201695e9ffde0c5d400a7674', transitive:false
        build name:'golang.org/x/sys', version:'8f0908ab3b2457e2e15403d3697c9ef5cb4b57a9', transitive:false
        build name:'github.com/docker/go-units', version:'9e638d38cf6977a37a8ea0078f3ee75a7cdb2dd1', transitive:false
        build name:'github.com/docker/go-connections', version:'e15c02316c12de00874640cd76311849de2aeed5', transitive:false
        build name:'golang.org/x/text', version:'f72d8390a633d5dfb0cc84043294db9f6c935756', transitive:false
        build name:'github.com/stretchr/testify', version:'4d4bfba8f1d1027c4fdbe371823030df51419987', transitive:false
        build name:'github.com/RackSec/srslog', version:'456df3a81436d29ba874f3590eeeee25d666f8a5', transitive:false
        build name:'github.com/imdario/mergo', tag:'0.2.1', transitive:false
        build name:'golang.org/x/sync', version:'de49d9dcd27d4f764488181bea099dfe6179bcf0', transitive:false
        build name:'github.com/docker/libnetwork', version:'cace103704768d39bd88a23d0df76df125a0e39a', transitive:false
        build name:'github.com/docker/go-events', version:'18b43f1bc85d9cdd42c05a6cd2d444c7a200a894', transitive:false
        build name:'github.com/armon/go-radix', version:'e39d623f12e8e41c7b5529e9a9dd67a1e2261f80', transitive:false
        build name:'github.com/armon/go-metrics', version:'eb0af217e5e9747e41dd5303755356b62d28e3ec', transitive:false
        build name:'github.com/hashicorp/go-msgpack', version:'71c2886f5a673a35f909803f38ece5810165097b', transitive:false
        build name:'github.com/hashicorp/memberlist', tag:'v0.1.0', transitive:false
        build name:'github.com/sean-/seed', version:'e2103e2c35297fb7e17febb81e49b312087a2372', transitive:false
        build name:'github.com/hashicorp/go-sockaddr', version:'acd314c5781ea706c710d9ea70069fd2e110d61d', transitive:false
        build name:'github.com/hashicorp/go-multierror', version:'fcdddc395df1ddf4247c69bd436e84cfa0733f7e', transitive:false
        build name:'github.com/hashicorp/serf', version:'598c54895cc5a7b1a24a398d635e8c0ea0959870', transitive:false
        build name:'github.com/docker/libkv', version:'1d8431073ae03cdaedb198a89722f3aab6d418ef', transitive:false
        build name:'github.com/vishvananda/netns', version:'604eaf189ee867d8c147fafc28def2394e878d25', transitive:false
        build name:'github.com/vishvananda/netlink', version:'1e86b2bee5b6a7d377e4c02bb7f98209d6a7297c', transitive:false
        build name:'github.com/BurntSushi/toml', version:'f706d00e3de6abe700c994cdd545a1a4915af060', transitive:false
        build name:'github.com/samuel/go-zookeeper', version:'d0e0d8e11f318e000a8cc434616d69e329edc374', transitive:false
        build name:'github.com/deckarep/golang-set', version:'ef32fa3046d9f249d399f98ebaf9be944430fd1d', transitive:false
        build name:'github.com/coreos/etcd', version:'824277cb3a577a0e8c829ca9ec557b973fe06d20', transitive:false
        build name:'github.com/ugorji/go', version:'f1f1a805ed361a0e078bb537e4ea78cd37dcf065', transitive:false
        build name:'github.com/hashicorp/consul', tag:'v0.5.2', transitive:false
        build name:'github.com/boltdb/bolt', version:'fff57c100f4dea1905678da7e90d92429dff2904', transitive:false
        build name:'github.com/miekg/dns', version:'75e6e86cc601825c5dbcd4e0c209eab180997cd7', transitive:false
        build name:'github.com/docker/distribution', version:'b38e5838b7b2f2ad48e06ec4b500011976080621', transitive:false
        build name:'github.com/vbatts/tar-split', tag:'v0.10.1', transitive:false
        build name:'github.com/opencontainers/go-digest', version:'a6d0ee40d4207ea02364bd3b9e8e77b9159ba1eb', transitive:false
        build name:'github.com/mistifyio/go-zfs', version:'22c9b32c84eb0d0c6f4043b6e90fc94073de92fa', transitive:false
        build name:'github.com/pborman/uuid', tag:'v1.0', transitive:false
        build name:'github.com/docker/notary', tag:'v0.4.2', transitive:false
        build name:'google.golang.org/grpc', tag:'v1.0.4', transitive:false
        build name:'github.com/miekg/pkcs11', version:'df8ae6ca730422dba20c768ff38ef7d79077a59f', transitive:false
        build name:'github.com/docker/go', tag:'v1.5.1-1-1-gbaf439e', transitive:false
        build name:'github.com/agl/ed25519', version:'d2b94fd789ea21d12fac1a4443dd3a3f79cda72c', transitive:false
        build name:'github.com/opencontainers/runc', version:'9c2d8d184e5da67c95d601382adf14862e4f2228', transitive:false, url:'https://github.com/docker/runc.git'
        build name:'github.com/opencontainers/runtime-spec', version:'1c7c27d043c2a5e513a44084d2b10d77d1402b8c', transitive:false
        build name:'github.com/seccomp/libseccomp-golang', tag:'v0.9.0', transitive:false
        build name:'github.com/coreos/go-systemd', tag:'v4', transitive:false
        build name:'github.com/godbus/dbus', tag:'v4.0.0', transitive:false
        build name:'github.com/syndtr/gocapability', version:'2c00daeb6c3b45114c80ac44119e7b8801fdd852', transitive:false
        build name:'github.com/golang/protobuf', version:'8ee79997227bf9b34611aee7946ae64735e6fd93', transitive:false
        build name:'github.com/Graylog2/go-gelf', version:'7029da823dad4ef3a876df61065156acb703b2ea', transitive:false
        build name:'github.com/fluent/fluent-logger-golang', tag:'v1.2.1', transitive:false
        build name:'github.com/philhofer/fwd', version:'98c11a7a6ec829d672b03833c3d69a7fae1ca972', transitive:false
        build name:'github.com/tinylib/msgp', version:'75ee40d2601edf122ef667e2a07d600d4c44490c', transitive:false
        build name:'github.com/fsnotify/fsnotify', tag:'v1.2.11', transitive:false
        build name:'github.com/aws/aws-sdk-go', tag:'v1.4.22', transitive:false
        build name:'github.com/go-ini/ini', version:'060d7da055ba6ec5ea7a31f116332fe5efa04ce0', transitive:false
        build name:'github.com/jmespath/go-jmespath', version:'0b12d6b521d83fc7f755e7cfc1b1fbdd35a01a74', transitive:false
        build name:'github.com/bsphere/le_go', version:'7a984a84b5492ae539b79b62fb4a10afc63c7bcf', transitive:false
        build name:'golang.org/x/oauth2', version:'96382aa079b72d8c014eb0c50f6c223d1e6a2de0', transitive:false
        build name:'google.golang.org/api', version:'3cc2e591b550923a2c5f0ab5a803feda924d5823', transitive:false
        build name:'cloud.google.com/go', version:'9d965e63e8cceb1b5d7977a202f0fcb8866d6525', transitive:false
        build name:'github.com/googleapis/gax-go', version:'da06d194a00e19ce00d9011a13931c3f6f6887c7', transitive:false
        build name:'google.golang.org/genproto', version:'b3e7c2fb04031add52c4817f53f43757ccbf9c18', transitive:false
        build name:'github.com/docker/docker-credential-helpers', tag:'v0.5.0', transitive:false
        build name:'github.com/docker/containerd', version:'9048e5e50717ea4497b757314bad98ea3763c145', transitive:false
        build name:'github.com/tonistiigi/fifo', version:'1405643975692217d6720f8b54aeee1bf2cd5cf4', transitive:false
        build name:'github.com/docker/swarmkit', version:'61a92e8ec074df5769decda985df4a3ab43c77eb', transitive:false
        build name:'github.com/gogo/protobuf', version:'8d70fb3182befc465c4a1eac8ad4d38ff49778e2', transitive:false
        build name:'github.com/cloudflare/cfssl', version:'7fb22c8cba7ecaf98e4082d22d65800cf45e042a', transitive:false
        build name:'github.com/google/certificate-transparency', version:'d90e65c3a07988180c5b1ece71791c0b6506826e', transitive:false
        build name:'golang.org/x/crypto', version:'3fbbcd23f1cb824e69491a5930cfeff09b12f4d2', transitive:false
        build name:'golang.org/x/time', version:'a4bde12657593d5e90d0533a3e4fd95e635124cb', transitive:false
        build name:'github.com/hashicorp/go-memdb', version:'cb9a474f84cc5e41b273b20c6927680b2a8776ad', transitive:false
        build name:'github.com/hashicorp/go-immutable-radix', version:'8e8ed81f8f0bf1bdd829593fdd5c29922c1ea990', transitive:false
        build name:'github.com/hashicorp/golang-lru', version:'a0d98a5f288019575c6d1f4bb1573fef2d1fcdc4', transitive:false
        build name:'github.com/coreos/pkg', version:'fa29b1d70f0beaddd4c7021607cc3c3be8ce94b8', transitive:false
        build name:'github.com/pivotal-golang/clock', version:'3fd3c1944c59d9742e1cd333672181cd1a6f9fa0', transitive:false
        build name:'github.com/prometheus/client_golang', version:'52437c81da6b127a9925d17eb3a382a2e5fd395e', transitive:false
        build name:'github.com/beorn7/perks', version:'4c0e84591b9aa9e6dcfdf3e020114cd81f89d5f9', transitive:false
        build name:'github.com/prometheus/client_model', version:'fa8ad6fec33561be4280a8f0514318c79d7f6cb6', transitive:false
        build name:'github.com/prometheus/common', version:'ebdfc6da46522d58825777cf1f90490a5b1ef1d8', transitive:false
        build name:'github.com/prometheus/procfs', version:'abf152e5f3e97f2fafac028d2cc06c1feb87ffa5', transitive:false
        build name:'github.com/matttproud/golang_protobuf_extensions', tag:'v1.0.0', transitive:false
        build name:'github.com/pkg/errors', version:'839d9e913e063e28dfd0e6c7b7512793e0a48be9', transitive:false
        build name:'github.com/grpc-ecosystem/go-grpc-prometheus', version:'6b7015e65d366bf3f19b2b2a000a831940f0f7e0', transitive:false
        build name:'github.com/spf13/cobra', tag:'v1.5.1', transitive:false, url:'https://github.com/dnephin/cobra.git'
        build name:'github.com/spf13/pflag', version:'9ff6c6923cfffbcd502984b8e0c80539a94968b7', transitive:false
        build name:'github.com/inconshreveable/mousetrap', version:'76626ae9c91c4f2a10f34cad8ce83ea42c93bb75', transitive:false
        build name:'github.com/flynn-archive/go-shlex', version:'3f9db97f856818214da2e1057f8ad84803971cff', transitive:false
        build name:'github.com/Nvveen/Gotty', version:'a8b993ba6abdb0e0c12b0125c603323a71c7790c', transitive:false, url:'https://github.com/ijc25/Gotty'
        build name:'github.com/docker/go-metrics', version:'86138d05f285fd9737a99bee2d9be30866b59d72', transitive:false
        build name:'github.com/mitchellh/mapstructure', version:'f3009df150dadf309fdee4a54ed65c124afad715', transitive:false
        build name:'github.com/xeipuuv/gojsonpointer', version:'e0fe6f68307607d540ed8eac07a342c33fa1b54a', transitive:false
        build name:'github.com/xeipuuv/gojsonreference', version:'e02fc20de94c78484cd5ffb007f8af96be030a45', transitive:false
        build name:'github.com/xeipuuv/gojsonschema', version:'93e72a773fade158921402d6a24c819b48aba29d', transitive:false
        build name:'gopkg.in/yaml.v2', version:'4c78c975fe7c825c6d1466c42be594d1d6f3aba6', transitive:false
        build name:'github.com/opencontainers/selinux', version:'ba1aefe8057f1d0cfb8e88d0ec1dc85925ef987d', transitive:false
    }
}
